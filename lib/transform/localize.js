const { getContentId, getContentTypeId, getFieldSettings } = require('../contentful');

/**
 * Get an ordered list of locales to use for translation based on fallback locales
 * @param {String} code Locale code
 * @param {Array} locales Array of contentful locale objects
 * @returns {Array} E.g. ['en-US', 'en-GB', 'de-DE']
 */
const getLocaleList = (code, locales = []) => {
  const locale = locales.find((locale) => locale.code === code);
  return locale ? [locale.code, ...getLocaleList(locale.fallbackCode, locales)] : [];
};

/**
 * Try to get the localized value. Stops at the first valid locale in codes
 * @param {Object} field Object with values for different locales { 'de-DE': '...', 'en-US': '...' }
 * @param  {...any} codes Array with codes generated by getLocaleList
 */
const localizeField = (field, ...codes) => {
  const [code, ...fallbackCodes] = codes;
  if (code && field.hasOwnProperty(code)) {
    return field[code];
  }

  if (fallbackCodes.length) {
    return localizeField(field, ...fallbackCodes);
  }
};

/**
 * Localize fields from contentful entry
 * @param {Array} fields Contetful fields array
 * @param {String} code Locale code e.g. 'de-DE'
 * @param {Object} options Object containing locales & content types from contentful
 */
const localizeEntry = (entry, code, options) => {
  const { locales, contentTypes } = options;
  const { fields } = entry;
  const { [getContentTypeId(entry)]: fieldSettings } = getFieldSettings(contentTypes) || {};
  const { code: defaultCode } = locales.find((locale) => locale.default);
  const localeCodes = getLocaleList(code, locales);

  const isLocalized = (key) => fieldSettings?.[key]?.localized ?? false;

  return {
    ...entry,
    fields: Object.fromEntries(
      Object.entries(fields).map(([key, field]) =>
        isLocalized(key) ? [key, localizeField(field, ...localeCodes)] : [key, localizeField(field, defaultCode)]
      )
    ),
  };
};

module.exports.localizeEntry = localizeEntry;
module.exports.localizeField = localizeField;
module.exports.getLocaleList = getLocaleList;
